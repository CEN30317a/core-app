"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin"))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){fromState.data&&fromState.data.ignoreState||($state.previous={state:fromState,params:fromParams,href:$state.href(fromState,fromParams)})})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("chat"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),ApplicationConfiguration.registerModule("contacts"),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),ApplicationConfiguration.registerModule("jobs"),ApplicationConfiguration.registerModule("referrals"),ApplicationConfiguration.registerModule("contacts"),angular.module("articles").run(["Menus",function(Menus){}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("articles",{"abstract":!0,url:"/articles",template:"<ui-view/>"}).state("articles.list",{url:"",templateUrl:"modules/articles/client/views/list-articles.client.view.html"}).state("articles.create",{url:"/create",templateUrl:"modules/articles/client/views/create-article.client.view.html",data:{roles:["user","admin"]}}).state("articles.view",{url:"/:articleId",templateUrl:"modules/articles/client/views/view-article.client.view.html"}).state("articles.edit",{url:"/:articleId/edit",templateUrl:"modules/articles/client/views/edit-article.client.view.html",data:{roles:["user","admin"]}})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","articleForm"),!1;var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","articleForm"),!1;var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("api/articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("chat").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Chat",state:"chat"})}]),angular.module("chat").config(["$stateProvider",function($stateProvider){$stateProvider.state("chat",{url:"/chat",templateUrl:"modules/chat/client/views/chat.client.view.html",data:{roles:["user","admin"]}})}]),angular.module("chat").controller("ChatController",["$scope","$location","Authentication","Socket",function($scope,$location,Authentication,Socket){$scope.messages=[],Authentication.user||$location.path("/"),Socket.socket||Socket.connect(),Socket.on("chatMessage",function(message){$scope.messages.unshift(message)}),$scope.sendMessage=function(){var message={text:this.messageText};Socket.emit("chatMessage",message),this.messageText=""},$scope.$on("$destroy",function(){Socket.removeListener("chatMessage")})}]),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("careers",{url:"/careers",templateUrl:"modules/core/client/views/careers.client.view.html"}).state("about",{url:"/about",templateUrl:"modules/core/client/views/about.client.view.html"}).state("contact",{url:"/contact",templateUrl:"modules/core/client/views/contactpage.client.view.html"}).state("services",{url:"/services",templateUrl:"modules/core/client/views/services.client.view.html"}).state("packages",{url:"/packages",templateUrl:"modules/core/client/views/packages.client.view.html"}).state("login",{url:"/login",templateUrl:"modules/core/client/views/login.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("CareersController",["$scope","$filter","$rootScope","Jobs",function($scope,$filter,$rootScope,Jobs){Jobs.query(function(data){$scope.Jobs=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.openCareerApplication=function(){$scope.careerApplicationVisible=!0},$scope.closeCareerApplication=function(){$scope.careerApplicationVisible=!1},$scope.openContactForm=function(){$rootScope.contactFormVisible=!0},$scope.closeContactForm=function(){$rootScope.contactFormVisible=!1},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.Jobs,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end),console.log($scope.pagedItems)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","$rootScope",function($scope,$state,Authentication,$rootScope){$scope.$state=$state,$scope.authentication=Authentication,$rootScope.signInVisible=!1,$rootScope.mobileMenuVisible=!1,$scope.toggleSignIn=function(){$rootScope.signInVisible=!$rootScope.signInVisible},$scope.toggleMenus=function(){$rootScope.mobileMenuVisible?$rootScope.mobileMenuVisible=!$rootScope.mobileMenuVisible:$rootScope.signInVisible=!$rootScope.signInVisible},$scope.openContactForm=function(){$rootScope.contactFormVisible=!0},$scope.closeContactForm=function(){$rootScope.contactFormVisible=!1},$scope.toggleMobileMenu=function(){$rootScope.mobileMenuVisible=!$rootScope.mobileMenuVisible},$scope.getHighestRole=function(){var roles;return $scope.authentication.user&&$scope.authentication.user.roles?(roles=$scope.authentication.user.roles,-1!==roles.indexOf("admin")?"admin":-1!==roles.indexOf("user")?"user":""):""}}]),angular.module("core").controller("HomeController",["$scope","$rootScope","$location","Contacts",function($scope,$rootScope,$location,Contacts){$scope.openContactForm=function(){$rootScope.contactFormVisible=!0},$scope.closeContactForm=function(){$rootScope.contactFormVisible=!1},$scope.submitContactForm=function(){var contact=new Contacts({name:this.name,email:this.email,message:this.message});contact.$save(function(response){$scope.name="",$scope.email="",$scope.message=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(contact){if(contact){contact.$remove();for(var i in $scope.contacts)$scope.contacts[i]===contact&&$scope.contacts.splice(i,1)}else $scope.contact.$remove(function(){$location.path("admin/contacts")})}}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?(initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)):void 0}),scope.$on("show-errors-reset",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?reset():void 0}),toggleClasses=function(invalid){return el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess?el.toggleClass("has-success",showValidationMessages&&!invalid):void 0}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("jobs").factory("Jobs",["$resource",function($resource){return $resource("api/job/:jobId",{articleId:"@_id"},{update:{method:"GET"}})}]),angular.module("contacts").factory("Contacts",["$resource",function($resource){return $resource("api/contacts/:contactId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),angular.module("contacts").config(["$stateProvider",function($stateProvider){$stateProvider.state("contacts",{"abstract":!0,url:"/admin/contacts",template:"<ui-view/>",data:{roles:["admin"]}}).state("contacts.list",{url:"",templateUrl:"modules/users/client/views/admin/list-contacts.client.view.html"}).state("contacts.view",{url:"/:contactId",templateUrl:"modules/users/client/views/admin/view-contact.client.view.html"}).state("contacts.edit",{url:"/:contactId",templateUrl:"modules/users/client/views/admin/view-contact.client.view.html",data:{roles:["admin"]}})}]),angular.module("jobs").config(["$stateProvider",function($stateProvider){$stateProvider.state("jobs",{"abstract":!0,url:"/admin/jobs",template:"<ui-view/>",data:{roles:["admin"]}}).state("jobs.list",{url:"",templateUrl:"modules/users/client/views/admin/list-jobs.client.view.html"}).state("jobs.create",{url:"/create",templateUrl:"modules/users/client/views/admin/create-job.client.view.html",data:{roles:["admin"]}}).state("jobs.view",{url:"/:jobId",templateUrl:"modules/users/client/views/admin/view-job.client.view.html"}).state("jobs.edit",{url:"/:jobId/edit",templateUrl:"modules/users/client/views/admin/edit-job.client.view.html",data:{roles:["admin"]}})}]),angular.module("referrals").config(["$stateProvider",function($stateProvider){$stateProvider.state("referrals",{"abstract":!0,url:"/referrals",template:"<ui-view>",data:{roles:["admin","user"]}}).state("referrals.safetyNet",{url:"/",templateUrl:"modules/users/client/views/employees/list-referrals.client.view.html"}).state("referrals.list",{url:"",templateUrl:"modules/users/client/views/employees/list-referrals.client.view.html",data:{roles:["admin","user"]}}).state("referrals.create",{url:"/create",templateUrl:"modules/users/client/views/admin/create-referral.client.view.html",data:{roles:["admin"]}}).state("referrals.view",{url:"/:referralId",templateUrl:"modules/users/client/views/admin/view-referral.client.view.html",data:{roles:["admin","user"]}}).state("referrals.edit",{url:"/:referralId/edit",templateUrl:"modules/users/client/views/admin/edit-referral.client.view.html",data:{roles:["admin"]}})}]),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html",data:{roles:["admin"]}}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("authentication.forgot",{url:"/forgotusername",templateUrl:"modules/users/client/views/authentication/forgot-username.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("contacts").controller("ContactsController",["$scope","$stateParams","$location","Authentication","Contacts",function($scope,$stateParams,$location,Authentication,Contacts){$scope.authentication=Authentication;$scope.contact;$scope.find=function(){$scope.contacts=Contacts.query()},$scope.findOne=function(){$scope.contact=Contacts.get({contactId:$stateParams.contactId})},$scope.remove=function(contact){if(contact){contact.$remove();for(var i in $scope.contacts)$scope.contacts[i]===contact&&$scope.contacts.splice(i,1)}else $scope.contact.$remove(function(){$location.path("admin/contacts")})},$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","contactForm"),!1;var contact=$scope.contact;contact.$update(function(){$location.path("admin/contacts/"+contact._id)},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("jobs").controller("JobsController",["$scope","$stateParams","$location","Authentication","Jobs",function($scope,$stateParams,$location,Authentication,Jobs){$scope.authentication=Authentication,$scope.create=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","jobForm"),!1;var job=new Jobs({title:this.title,description:this.description,contract:this.contract,closing:this.closing,minExp:this.minExp,prefExp:this.prefExp,responsibilities:this.responsibilities});job.$save(function(response){$location.path("admin/jobs"),$scope.title="",$scope.description="",$scope.contract="",$scope.closing="",$scope.minExp="",$scope.prefExp="",$scope.responsibilities=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(job){if(job){job.$remove();for(var i in $scope.jobs)$scope.jobs[i]===job&&$scope.jobs.splice(i,1)}else $scope.job.$remove(function(){$location.path("admin/jobs")})},$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","jobForm"),!1;var job=$scope.job;job.$update(function(){$location.path("admin/jobs/"+job._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.jobs=Jobs.query()},$scope.findOne=function(){$scope.job=Jobs.get({jobId:$stateParams.jobId})}}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$rootScope","$state","$http","$location","$window","Authentication","PasswordValidator",function($scope,$rootScope,$state,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.closeSignIn=function(){$rootScope.signInVisible=!1,$scope.credentials&&$scope.credentials.username&&($scope.credentials.username=""),$scope.credentials&&$scope.credentials.password&&($scope.credentials.password="")},$scope.signup=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signup",$scope.credentials).success(function(response){$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.askForUsernameReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotUsernameForm"),!1)},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("referrals").controller("ReferralsController",["$scope","$stateParams","$location","Authentication","Referrals",function($scope,$stateParams,$location,Authentication,Referrals){$scope.authentication=Authentication,$scope.isAdmin="admin"===Authentication.user.roles[0]?!0:!1,$scope.create=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","referralForm"),!1;var referral=new Referrals({title:this.title,assigned:this.assigned,locate:this.locate,dateVisit:this.dateVisit,contactClient:this.contactClient,description:this.description,history:this.history,comments:this.comments});referral.$save(function(response){$location.path("referrals"),$scope.title="",$scope.assigned="",$scope.locate="",$scope.dateVisit="",$scope.contactClient="",$scope.description="",$scope.history="",$scope.comments=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(referral){if(referral){referral.$remove();for(var i in $scope.referrals)$scope.referrals[i]===referral&&$scope.referrals.splice(i,1)}else $scope.referral.$remove(function(){$location.path("referrals")})},$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","referralForm"),!1;var referral=$scope.referral;referral.$update(function(){$location.path("referrals/"+referral._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.referrals=Referrals.query()},$scope.findOne=function(){$scope.referral=Referrals.get({referralId:$stateParams.referralId})},$scope.displayReferral=function(referral){return referral.assigned===$scope.authentication.user.username||$scope.isAdmin?!0:!1},$scope.getHighestRole=function(){var roles;return $scope.authentication.user&&$scope.authentication.user.roles?(roles=$scope.authentication.user.roles,-1!==roles.indexOf("admin")?"admin":-1!==roles.indexOf("user")?"user":""):""}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){
$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.unshift(function(password){var result=PasswordValidator.getResult(password),strengthIdx=0,strengthMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];strengthMeter.length;return result.errors.length<strengthMeter.length&&(strengthIdx=strengthMeter.length-result.errors.length-1),scope.strengthColor=strengthMeter[strengthIdx].color,scope.strengthProgress=strengthMeter[strengthIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,void modelCtrl.$setValidity("strength",!1)):(scope.popoverMsg="",modelCtrl.$setValidity("strength",!0),password)})}}}]),angular.module("users").directive("passwordVerify",function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,modelCtrl){scope.$watch(function(){var combined;return(scope.passwordVerify||modelCtrl.$viewValue)&&(combined=scope.passwordVerify+"_"+modelCtrl.$viewValue),combined},function(value){value&&modelCtrl.$parsers.unshift(function(viewValue){var origin=scope.passwordVerify;return origin!==viewValue?void modelCtrl.$setValidity("passwordVerify",!1):(modelCtrl.$setValidity("passwordVerify",!0),viewValue)})})}}}),angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("contacts").factory("Contacts",["$resource",function($resource){return $resource("api/contacts/:contactId",{contactId:"@_id"},{update:{method:"PUT"}})}]),angular.module("jobs").factory("Jobs",["$resource",function($resource){return $resource("api/jobs/:jobId",{jobId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){var result=owaspPasswordStrengthTest.test(password);return result},getPopoverMsg:function(){var popoverMsg="Please enter a passphrase or password with greater than 10 characters, numbers, lowercase, upppercase, and special characters.";return popoverMsg}}}]),angular.module("referrals").factory("Referrals",["$resource",function($resource){return $resource("api/referrals/:referralId",{referralId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);